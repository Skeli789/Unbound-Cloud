name: Build and Release Desktop App

# TODO: Set a publisher during packaging

# Trigger this workflow when pushing a tag (e.g. v1.0.0)
# on:
#   push:
#     tags:
#       - 'v*'

# Always when pushing to electron branch
on:
  workflow_dispatch:
  push:
    branches:
    - electron

jobs:
# -- Build Job ---
  build:
    name: Build on ${{ matrix.os.name }}
    # Run each OS in parallel, don't cancel the rest on failure
    strategy:
      matrix:
        os:
          - { name: "linux", runner: "ubuntu-latest" } # Linux
          - { name: "darwin", runner: "macos-latest" } # macOS
          - { name: "win32", runner: "windows-latest" } # Windows
    runs-on: ${{ matrix.os.runner }}

    steps:
      - uses: actions/checkout@v4
  
      - name: Enable Yarn global cache on Windows
        if: ${{ matrix.os.name == 'win32' }}
        shell: bash
        run: yarn config set enableGlobalCache true

      - name: Setup Environment
        uses: ./.github/actions/build_and_release_setup_env

      - name: Install dependencies
        shell: bash
        run: |
          if [ "${{ matrix.os.name }}" == "win32" ]; then
            rm -f yarn.lock
            yarn config delete proxy
            yarn config delete https-proxy
            yarn config delete registry
          fi
          yarn install --network-timeout 1000000

      - name: Build
        run: yarn build
        env:
          CI: false # Ignore build warnings

      - name: Package apps
        shell: bash
        run: |
          if [ "${{ matrix.os.name }}" == "linux" ]; then
            yarn package-linux64
            yarn package-linuxarm64
            yarn package-linuxarmv7l
            # yarn package-linuxmips64el
          elif [ "${{ matrix.os.name }}" == "darwin" ]; then
            yarn package-mac64
            yarn package-macarm64
            # yarn package-macuniversal
          elif [ "${{ matrix.os.name }}" == "win32" ]; then
            npm config set script-shell bash
            yarn package-win32
            yarn package-win64
            yarn package-winarm64
          fi

      - name: Cache packaged apps
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ matrix.os.name }}-dist-${{ github.sha }}

# -- Upload Artifacts Job --
  upload-artifacts:
    name: Upload artifacts (${{ matrix.os.name }}-${{ matrix.os.arch }})
    needs: build
    strategy:
      fail-fast: false # Don't cancel the rest on failure
      matrix:
        os:
        - { name: "linux", arch: "x64", runner: "ubuntu-latest" }
        - { name: "linux", arch: "arm64", runner: "ubuntu-latest" }
        - { name: "linux", arch: "armv7l", runner: "ubuntu-latest" }
        # - { name: "linux", arch: "mips64el", runner: "ubuntu-latest" } # linux-mips64el
        - { name: "win32", arch: "ia32", runner: "windows-latest" }
        - { name: "win32", arch: "x64", runner: "windows-latest" }
        - { name: "win32", arch: "arm64", runner: "windows-latest" }
        - { name: "darwin", arch: "x64", runner: "macos-latest" } # macOS
        - { name: "darwin", arch: "arm64", runner: "macos-latest" } # macOS
        # - { name: "darwin", arch: "universal", runner: "macos-latest" } # mac-universal
    runs-on: ${{ matrix.os.runner }}

    steps:
      - name: Load cached packages
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ matrix.os.name }}-dist-${{ github.sha }}

      - name: Upload ${{ matrix.os.name }}-${{ matrix.os.arch }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os.name }}-${{ matrix.os.arch }}
          path: dist/UnboundCloud-${{ matrix.os.name }}-${{ matrix.os.arch }}

  # --- Release Job ---
  release:
    name: Create Release (${{ matrix.artifact }})
    needs: upload-artifacts
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        artifact: [
          "linux-x64", "linux-arm64", "linux-armv7l", # , "linux-mips64el"
          "win32-ia32", "win32-x64", "win32-arm64",
          "darwin-x64", "darwin-arm64" # , "darwin-universal"
        ]

    steps:
      - uses: actions/checkout@v4

      # Download the artifact
      - name: Download ${{ matrix.artifact }} artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: .

      # Create a release using the tag name
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref }}

      # Release each artifact
      - name: Upload ${{ matrix.artifact }} release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.artifact }}.zip
          asset_name: $${{ matrix.artifact }}.zip
          asset_content_type: $application/zip
